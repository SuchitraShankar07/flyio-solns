2024-10-29 22:38:14,307{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin /home/Suchitra/go/bin/test --node-count 1 --time-limit 1
2024-10-29 22:38:14,364{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x472d201"
         "maelstrom.db$db$reify__16142@472d201"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x33e09baf" "2024-10-29T22:38:14.286+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x4c02f50"
         "maelstrom.net$jepsen_net$reify__15251@4c02f50"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x35852b6"
         "maelstrom.workload.echo$client$reify__16863@35852b6"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x27d6ff8c"
         "java.util.concurrent.CyclicBarrier@27d6ff8c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x105c253a"
         "jepsen.checker$compose$reify__11881@105c253a"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "/home/Suchitra/go/bin/test"
  "--node-count"
  "1"
  "--time-limit"
  "1")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@156322ce"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@546f0f36"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/home/Suchitra/go/bin/test"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 1000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x19f72e12"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@19f72e12"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x1ad4ff2a"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@1ad4ff2a"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x625ae6d"
                                                    "maelstrom.workload.echo$workload$fn__16882@625ae6d"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x207bf6d8"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x5cdb7b"
         "maelstrom.net$jepsen_os$reify__15254@5cdb7b"]
 :time-limit 1
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-10-29 22:38:15,282{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-10-29 22:38:15,284{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-10-29 22:38:15,285{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-10-29 22:38:15,288{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-10-29 22:38:15,290{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-10-29 22:38:15,291{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /home/Suchitra/go/bin/test []
2024-10-29 22:38:15,309{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-10-29 22:38:15,320{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 36"
2024-10-29 22:38:15,324{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 36", :in_reply_to 1, :msg_id 1, :type "echo_ok"}
2024-10-29 22:38:15,452{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 94"
2024-10-29 22:38:15,456{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 94", :in_reply_to 2, :msg_id 2, :type "echo_ok"}
2024-10-29 22:38:15,541{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 21"
2024-10-29 22:38:15,543{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 21", :in_reply_to 3, :msg_id 3, :type "echo_ok"}
2024-10-29 22:38:15,763{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 103"
2024-10-29 22:38:15,767{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 103", :in_reply_to 4, :msg_id 4, :type "echo_ok"}
2024-10-29 22:38:16,030{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 119"
2024-10-29 22:38:16,034{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 119", :in_reply_to 5, :msg_id 5, :type "echo_ok"}
2024-10-29 22:38:16,170{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 51"
2024-10-29 22:38:16,172{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 51", :in_reply_to 6, :msg_id 6, :type "echo_ok"}
2024-10-29 22:38:16,248{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 42"
2024-10-29 22:38:16,250{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 42", :in_reply_to 7, :msg_id 7, :type "echo_ok"}
2024-10-29 22:38:16,264{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-10-29 22:38:16,290{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-10-29 22:38:17,293{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-10-29 22:38:17,294{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2024-10-29 22:38:17,554{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2024-10-29 22:38:17,560{GMT}	INFO	[jepsen results] jepsen.store: Wrote /home/Suchitra/Desktop/flyio/maelstrom/store/echo/20241029T223814.286+0530/results.edn
2024-10-29 22:38:17,567{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 7,
         :ok-count 7,
         :fail-count 0,
         :info-count 0,
         :by-f {:echo {:valid? true,
                       :count 7,
                       :ok-count 7,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 1.0},
 :net {:all {:send-count 16,
             :recv-count 16,
             :msg-count 16,
             :msgs-per-op 2.2857144},
       :clients {:send-count 16, :recv-count 16, :msg-count 16},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true, :errors ()},
 :valid? true}


Everything looks good! ヽ(‘ー`)ノ
